local ffi, websockets, http, base64 = require("ffi"), require("gamesense/websockets"), require("gamesense/http"), require("gamesense/base64")

local urls = {
    { url = "https://raw.githubusercontent.com/Shero1488/gamesense-lib/refs/heads/main/xor.lua", filename = "xor.lua" },
    { url = "https://raw.githubusercontent.com/Shero1488/gamesense-lib/refs/heads/main/extended_exploits.lua", filename = "extended_exploits.lua" }
}

local options = {
    absolute_timeout = 2,
    network_timeout = 1,
    params = { per_page = 100 }
}

local vector = require("vector")
local notify=(function()local b=vector;local c=function(d,b,c)return d+(b-d)*c end;local e=function()return b(client.screen_size())end;local f=function(d,...)local c={...}local c=table.concat(c,"")return b(renderer.measure_text(d,c))end;local g={notifications={bottom={}},max={bottom=6}}g.__index=g;g.new_bottom=function(h,i,j,...)table.insert(g.notifications.bottom,{started=false,instance=setmetatable({active=false,timeout=5,color={["r"]=h,["g"]=i,["b"]=j,a=0},x=e().x/2,y=e().y,text=...},g)})end;function g:handler()local d=0;local b=0;for d,b in pairs(g.notifications.bottom)do if not b.instance.active and b.started then table.remove(g.notifications.bottom,d)end end;for d=1,#g.notifications.bottom do if g.notifications.bottom[d].instance.active then b=b+1 end end;for c,e in pairs(g.notifications.bottom)do if c>g.max.bottom then return end;if e.instance.active then e.instance:render_bottom(d,b)d=d+1 end;if not e.started then e.instance:start()e.started=true end end end;function g:start()self.active=true;self.delay=globals.realtime()+self.timeout end;function g:get_text()local d=""for b,b in pairs(self.text)do local c=f("",b[1])local c,e,f=255,255,255;if b[2]then c,e,f=255, 82, 249 end;d=d..("\a%02x%02x%02x%02x%s"):format(c,e,f,self.color.a,b[1])end;return d end;local k=(function()local d={}d.rec=function(d,b,c,e,f,g,k,l,m)m=math.min(d/2,b/2,m)renderer.rectangle(d,b+m,c,e-m*2,f,g,k,l)renderer.rectangle(d+m,b,c-m*2,m,f,g,k,l)renderer.rectangle(d+m,b+e-m,c-m*2,m,f,g,k,l)renderer.circle(d+m,b+m,f,g,k,l,m,180,.25)renderer.circle(d-m+c,b+m,f,g,k,l,m,90,.25)renderer.circle(d-m+c,b-m+e,f,g,k,l,m,0,.25)renderer.circle(d+m,b-m+e,f,g,k,l,m,-90,.25)end;d.rec_outline=function(d,b,c,e,f,g,k,l,m,n)m=math.min(c/2,e/2,m)if m==1 then renderer.rectangle(d,b,c,n,f,g,k,l)renderer.rectangle(d,b+e-n,c,n,f,g,k,l)else renderer.rectangle(d+m,b,c-m*2,n,f,g,k,l)renderer.rectangle(d+m,b+e-n,c-m*2,n,f,g,k,l)renderer.rectangle(d,b+m,n,e-m*2,f,g,k,l)renderer.rectangle(d+c-n,b+m,n,e-m*2,f,g,k,l)renderer.circle_outline(d+m,b+m,f,g,k,l,m,180,.25,n)renderer.circle_outline(d+m,b+e-m,f,g,k,l,m,90,.25,n)renderer.circle_outline(d+c-m,b+m,f,g,k,l,m,-90,.25,n)renderer.circle_outline(d+c-m,b+e-m,f,g,k,l,m,0,.25,n)end end;d.glow_module_notify=function(b,c,e,f,g,k,l,m,n,o,p,q,r,s,s)local t=1;local u=1;if s then d.rec(b,c,e,f,l,m,n,o,k)end;for l=0,g do local m=o/2*(l/g)^3;d.rec_outline(b+(l-g-u)*t,c+(l-g-u)*t,e-(l-g-u)*t*2,f-(l-g-u)*t*2,p,q,r,m/1.5,k+t*(g-l+u),t)end end;return d end)()function g:render_bottom(g,l)local e=e()local m=6;local n="     "..self:get_text()local f=f("",n)local o=8;local p=5;local q=0+m+f.x;local q,r=q+p*2,12+10+1;local s,t=self.x-q/2,math.ceil(self.y-40+.4)local u=globals.frametime()if globals.realtime()<self.delay then self.y=c(self.y,e.y-45-(l-g)*r*1.4,u*7)self.color.a=c(self.color.a,255,u*2)else self.y=c(self.y,self.y-10,u*15)self.color.a=c(self.color.a,0,u*20)if self.color.a<=1 then self.active=false end end;local c,e,g,l=self.color.r,self.color.g,self.color.b,self.color.a;k.glow_module_notify(s,t,q,r,15,o,25,25,25,l,255, 82, 249,l,true)local k=p+2;k=k+0+m;renderer.text(s+k,t+r/2-f.y/2,255,82,249,l,"b",nil,"E")renderer.text(s+k,t+r/2-f.y/2,c,e,g,l,"",nil,n)end;client.set_event_callback("paint_ui",function()g:handler()end)return g end)()
notify.new_bottom(255, 82, 249, { { 'Loader loading' }, { "... ", true }, })

for i, file in ipairs(urls) do
    local filename = file.filename
    http.get(file.url, options, function(success, response)
        if success and response.status == 200 then
            local data = response.body
            writefile("gamesense/" .. filename, data)
        else
            print("Error:", response.status, response.status_message)
        end
    end)
end

local function file_exists(file_path)
    local content = readfile(file_path)
    return content ~= nil
end

ffi.cdef[[
    typedef long(__thiscall* GetRegistryString)(void* this, const char* pFileName, const char* pPathID);
    typedef bool(__thiscall* Wrapper)(void* this, const char* pFileName, const char* pPathID);
]]

local type = ffi.typeof("void***")
local interface = client.create_interface("filesystem_stdio.dll", "VBaseFileSystem011")
local system10 = ffi.cast(type, interface)
local systemxwrapper = ffi.cast("Wrapper", system10[0][10])
local gethwid = ffi.cast("GetRegistryString", system10[0][13])

local function file_checker()
    for i = 65, 90 do
        local file_check = string.char(i) .. ":\\Windows\\Setup\\State\\State.ini"

        if systemxwrapper(system10, file_check, "elysium") then
            return file_check
        end
    end
    return nil
end

local function get_hwid()
    local file_check = file_checker()
    if file_check then
        local hwid = gethwid(system10, file_check, "elysium")
        return base64.encode(hwid)
    else
        return nil
    end
end

local hwid = get_hwid()

local DEFAULT_URL = "ws://95.215.56.172:3000"
local websocket_connection = nil
local connected = false
local logged_in = false
local luas = {}
local user_count_label = ui.new_label("LUA", "B", "Connected Users: N/A")
local elysium_sub_label = ui.new_label("LUA", "B", "Elysium sub: N/A")
local label1 = ui.new_label("LUA", "B", "Username")
local user_textbox = ui.new_textbox("LUA", "B", "Username")
local label2 = ui.new_label("LUA", "B", "Password")
local pass_textbox = ui.new_textbox("LUA", "B", "Password")
local lua_listbox = ui.new_listbox("LUA", "B", "Lua List", {})
ui.set_visible(lua_listbox, false)
local checkboxes = {}
local user_count_loader = 0
local elysium_sub = 0

local PING_INTERVAL = 10000
local ping_timer = nil

local function send_ping()
    if websocket_connection then
        websocket_connection:send('{"type": "ping"}')
    end
end

local function update_checkboxes_visibility()
    for i, lua in ipairs(luas) do
        local checkbox = checkboxes[i]
        if ui.get(lua_listbox) == i - 1 then
            ui.set_visible(checkbox, true)
        else
            ui.set_visible(checkbox, false)
        end
    end
end

local function create_checkboxes()
    for i = 1, #luas do
        local checkbox = ui.new_checkbox("LUA", "B", "Load on Startup")
        ui.set_visible(checkbox, false)
        table.insert(checkboxes, checkbox)

        -- Чтение информации о загруженных Lua-скриптах из файла
        local startup_lua_data = readfile("startup_luas.txt") or "{}"
        local startup_lua = json.parse(startup_lua_data) or {}
        if startup_lua[luas[i]] then
            ui.set(checkbox, true)
            luas[i] = luas[i] .. "    LOADED"
            ui.update(lua_listbox, luas)
        end

        ui.set_callback(checkbox, function(self)
            local startup_lua = json.parse(readfile("startup_luas.txt") or "{}") or {}
            startup_lua[luas[i]] = ui.get(self)
            writefile("startup_luas.txt", json.stringify(startup_lua))
        end)
    end
end

local load_button = ui.new_button("LUA", "B", "Load Lua", function()
    local selected_lua = luas[ui.get(lua_listbox) + 1]
    if selected_lua then
        local load_message = string.format([[{"type": "load_lua", "lua": "%s"}]], selected_lua)
        websocket_connection:send(load_message)
        print("[Elysium loader] -> ", selected_lua)

        luas[ui.get(lua_listbox) + 1] = selected_lua .. "    LOADED"
        ui.update(lua_listbox, luas)
    else
        print("[Elysium loader] -")
    end
end)

local unload_button = ui.new_button("LUA", "B", "Unload Lua", function()
    local selected_lua = luas[ui.get(lua_listbox) + 1]
    if selected_lua then
        local lua_name = selected_lua:gsub("    LOADED", "")

        luas[ui.get(lua_listbox) + 1] = lua_name
        ui.update(lua_listbox, luas)

        client.reload_active_scripts()

        _G[lua_name] = nil
        package.loaded[lua_name] = nil

        print("[Elysium loader] -> Unloaded Lua: ", lua_name)
    else
        print("[Elysium loader] -")
    end
end)

local function save_credentials(username, password)
    local creds = string.format('{"login": "%s", "password": "%s"}', username, password)
    writefile("user_creds.txt", creds)
end

local login_button = ui.new_button("LUA", "B", "Login", function()
    if websocket_connection then
        local username = ui.get(user_textbox)
        local password = ui.get(pass_textbox)

        if username == "" or password == "" then
            print("[Elysium loader] Please enter valid credentials.")
            return
        end

        local login_message = string.format([[
            {
                "type": "login",
                "login": "%s",
                "password": "%s",
                "hwid": "%s"
            }
        ]], username, password, hwid)

        websocket_connection:send(login_message)

        save_credentials(username, password)

        for i, lua in ipairs(luas) do
            local checkbox_value = ui.get(checkboxes[i])
            local startup_lua = json.parse(readfile("startup_luas.txt") or "{}") or {}
            startup_lua[lua] = checkbox_value
            writefile("startup_luas.txt", json.stringify(startup_lua))
        end

    else
        print("[Elysium loader] Connection not established.")
    end
end)

local register_button = ui.new_button("LUA", "B", "Register", function()
    if websocket_connection then
        local username = ui.get(user_textbox)
        local password = ui.get(pass_textbox)

        if username == "" or password == "" then
            print("[Elysium loader] Please enter valid credentials.")
            return
        end

        local register_message = string.format([[
            {
                "type": "register",
                "login": "%s",
                "password": "%s",
                "hwid": "%s"
            }
        ]], username, password, hwid)

        websocket_connection:send(register_message)

        save_credentials(username, password)

        for i, lua in ipairs(luas) do
            local checkbox_value = ui.get(checkboxes[i])
            local startup_lua = json.parse(readfile("startup_luas.txt") or "{}") or {}
            startup_lua[lua] = checkbox_value
            writefile("startup_luas.txt", json.stringify(startup_lua))
        end

    else
        print("[Elysium loader] Connection not established.")
    end
end)

local label = ui.new_label("LUA", "B", "Log in to access your purchased luas")
ui.set_visible(user_count_label, false)
ui.set_visible(elysium_sub_label, false)
ui.set_visible(login_button, false)
ui.set_visible(register_button, false)
ui.set_visible(load_button, false)
ui.set_visible(unload_button, false)
ui.set_visible(user_textbox, false)
ui.set_visible(pass_textbox, false)
ui.set_visible(label, false)
ui.set_visible(label1, false)
ui.set_visible(label2, false)

local callbacks = {
    open = function(ws)
        print("[Elysium loader] Connected.")
        websocket_connection = ws
        connected = true
        logged_in = false

        local creds_data = readfile("user_creds.txt") or "{}"
        
        local username = string.match(creds_data, '"login": "%s*(.-)%s*"')
        local password = string.match(creds_data, '"password": "%s*(.-)%s*"')

        if username and password then
            local login_message = string.format([[
                {
                    "type": "login",
                    "login": "%s",
                    "password": "%s",
                    "hwid": "%s"
                }
            ]], username, password, hwid)

            websocket_connection:send(login_message)
            print("[Elysium loader] Logging in...")
        else
            print("[Elysium loader] No saved credentials found.")
        end
    end,
    message = function(ws, data)
        local message_data = json.parse(data)
        if not message_data then
            print("[Elysium loader] Invalid message received.")
            return
        end

        if message_data.type == "ping" then
            websocket_connection:send('{"type": "pong"}')
        elseif message_data.type == "login" then
            if message_data.success then
                ui.set_visible(user_count_label, true)
                ui.set_visible(elysium_sub_label, true)
                ui.set_visible(login_button, false)
                ui.set_visible(register_button, false)
                ui.set_visible(load_button, true)
                ui.set_visible(unload_button, true)
                ui.set_visible(user_textbox, false)
                ui.set_visible(pass_textbox, false)
                ui.set_visible(label, false)
                ui.set_visible(label1, false)
                ui.set_visible(label2, false)
                print("[Elysium loader] Online: " .. message_data.login)
                logged_in = true

                local startup_lua_data = readfile("startup_luas.txt") or "{}"
                local startup_lua = json.parse(startup_lua_data) or {}
                for lua, should_load in pairs(startup_lua) do
                    if should_load then
                        local load_message = string.format([[{"type": "load_lua", "lua": "%s"}]], lua)
                        websocket_connection:send(load_message)
                        print("[Elysium loader] Loading Lua: ", lua)
                        
                        for i, l in ipairs(luas) do
                            if l == lua then
                                luas[i] = l .. "    LOADED"
                                ui.update(lua_listbox, luas)
                                break
                            end
                        end
                    end
                end
            else
                --print("[Elysium loader] Error: ", message_data.message)
                logged_in = false

                ui.set_visible(user_count_label, false)
                ui.set_visible(elysium_sub_label, false)
                ui.set_visible(login_button, true)
                ui.set_visible(register_button, true)
                ui.set_visible(load_button, false)
                ui.set_visible(unload_button, false)
                ui.set_visible(user_textbox, true)
                ui.set_visible(pass_textbox, true)
                ui.set_visible(label, true)
                ui.set_visible(label1, true)
                ui.set_visible(label2, true)
            end
        elseif message_data.type == "luas" then
            luas = message_data.luas or {}
            ui.set_visible(load_button, true)
            ui.set_visible(unload_button, true)
            ui.update(lua_listbox, luas)
            ui.set_visible(lua_listbox, true)

            for _, checkbox in ipairs(checkboxes) do
                ui.delete(checkbox)
            end
            checkboxes = {}
            create_checkboxes()
            update_checkboxes_visibility()

        elseif message_data.type == "user_count" then
            user_count_loader = message_data.count

            if user_count_loader then
                ui.set(user_count_label, "Connected Users: " .. user_count_loader)
            end

        elseif message_data.type == "subscription_info" then
            elysium_sub = message_data.days

            if elysium_sub then
                ui.set(elysium_sub_label, "Elysium sub: " .. elysium_sub .. " days")
            end

        elseif message_data.type == "error" then
            --print("[Elysium loader] Error: " .. message_data.message)

        elseif message_data.type == "lua_link" then
            local lua_link = message_data.link
            local lua_name = message_data.luaName

            if not lua_link then
                return
            end

            http.get(lua_link, function(success, response)
                if success then
                    local lua_content = response.body

                    if not lua_content or lua_content == "" then
                        print("[Elysium loader] Error: Empty Lua content received from server.")
                        return
                    end

                    local loaded_func, load_err = load(lua_content)

                    if not loaded_func then
                        print("[Elysium loader] Error loading Lua script:", load_err)
                    else
                        local success, run_err = pcall(loaded_func)
                        if not success then
                            print("[Elysium loader] Error running Lua script:", run_err)
                        end
                    end
                else
                    print("[Elysium loader] Error: failed while loading Lua script.")
                end
            end)
   
        elseif message_data.type == "register" then
            if message_data.success then
                print("[Elysium loader] Registration successful.")
            else
                print("[Elysium loader] Registration error: ", message_data.message)
            end
        end
    end,
    close = function(ws, code, reason, was_clean)
        print("[Elysium loader] Connection closed.")
        websocket_connection = nil
        connected = false
        logged_in = false

        ui.set_visible(user_count_label, false)
        ui.set_visible(elysium_sub_label, false)
        ui.set_visible(login_button, false)
        ui.set_visible(register_button, false)
        ui.set_visible(load_button, false)
        ui.set_visible(unload_button, false)
        ui.set_visible(user_textbox, false)
        ui.set_visible(pass_textbox, false)
        ui.set_visible(label, false)
        ui.set_visible(label1, false)
        ui.set_visible(label2, false)

        for _, checkbox in ipairs(checkboxes) do
            ui.set_visible(checkbox, false)
        end
    end,
    error = function(ws, err)
        print("[Elysium loader] Connection error.")
        websocket_connection = nil
        connected = false
        logged_in = false

        ui.set_visible(user_count_label, false)
        ui.set_visible(elysium_sub_label, false)
        ui.set_visible(user_textbox, true)
        ui.set_visible(pass_textbox, true)
        ui.set_visible(login_button, true)
        ui.set_visible(register_button, true)
        ui.set_visible(label, true)
        ui.set_visible(label1, true)
        ui.set_visible(label2, true)

        for _, checkbox in ipairs(checkboxes) do
            ui.set_visible(checkbox, false)
        end
    end
}

local function connect(url)
    websockets.connect(url, callbacks)
end

local creds_data = readfile("user_creds.txt") or "{}"
local username = string.match(creds_data, '"login": "%s*(.-)%s*"')
local password = string.match(creds_data, '"password": "%s*(.-)%s*"')

if username and password then
    ui.set(user_textbox, username)
    ui.set(pass_textbox, password)
else
    ui.set_visible(user_count_label, false)
    ui.set_visible(elysium_sub_label, false)
    ui.set_visible(user_textbox, true)
    ui.set_visible(pass_textbox, true)
    ui.set_visible(login_button, true)
    ui.set_visible(register_button, true)
    ui.set_visible(label, true)
    ui.set_visible(label1, true)
    ui.set_visible(label2, true)
end

websockets.connect(DEFAULT_URL, callbacks)

client.set_event_callback("paint_ui", function()
    update_checkboxes_visibility()
end)
